name: Publish GitHub Release as newest

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1-5'

jobs:
  publish-release:
    name: Publish GitHub Release
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Get latest draft name
        id: get_latest_draft
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          latest_release=$(gh release list --json name,tagName,isDraft,isPrerelease -L 1 --jq '.[0]')
          is_latest_draft=$(jq -r '.isDraft' <<< $latest_release)
          echo "is_latest_draft=$is_latest_draft" >> $GITHUB_OUTPUT

          if [ "$is_latest_draft" != "true" ]; then
              echo "No pre-release found"
              exit 0
          fi

          latest_draft_version=$(jq -r '.tagName' <<< $latest_release)
          echo "latest_draft_version=$latest_draft_version" >> $GITHUB_OUTPUT

          latest_draft_name=$(jq -r '.name' <<< $latest_release)
          echo "latest_draft_name=$latest_draft_name" >> $GITHUB_OUTPUT

      - name: Log in to Azure
        if: steps.get_latest_draft.outputs.is_latest_draft == 'true'
        uses: Azure/login@cb79c773a3cfa27f31f25eb3f677781210c9ce3d # v1.6.1
        with:
          creds: ${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL }}

      - name: Download Play Store credentials
        if: steps.get_latest_draft.outputs.is_latest_draft == 'true'
        env:
          ACCOUNT_NAME: bitwardenci
          CONTAINER_NAME: mobile
        run: |
          mkdir -p ${{ github.workspace }}/secrets

          az storage blob download --account-name $ACCOUNT_NAME --container-name $CONTAINER_NAME \
          --name authenticator_play_store-creds.json --file ${{ github.workspace }}/secrets/authenticator_play_store-creds.json --output none

      - name: Check released version
        if: steps.get_latest_draft.outputs.is_latest_draft == 'true'
        id: appstore_version
        run: |
          appstore_version=$(bundle exec fastlane run getLatestVersion \
            serviceCredentialFile:${{ github.workspace }}/secrets/authenticator_play_store-creds.json }})

          echo "Latest version on Google Play Store: $appstore_version"
          echo "appstore_version=$appstore_version" >> $GITHUB_OUTPUT

      - name: Check if version is already released
        if: steps.get_latest_draft.outputs.is_latest_draft == 'true'
        id: check_version
        env:
          latest_draft_version: ${{ steps.get_latest_draft.outputs.latest_draft_version }}
          APPSTORE_VERSION: ${{ steps.appstore_version.outputs.appstore_version }}
        run: |
          if [ "$latest_draft_version" == "$APPSTORE_VERSION" ]; then
              echo "Version $latest_draft_version is already released on Google Play Store"
              echo "version_released=true" >> $GITHUB_OUTPUT
          else
              echo "Version $latest_draft_version is not released on Google Play Store"
              echo "version_released=false" >> $GITHUB_OUTPUT
          fi

      - name: Make GitHub release latest and non-pre-release
        if: steps.check_version.outputs.version_released == 'true'
        env:
          TAG: ${{ steps.get_latest_draft.outputs.latest_draft_version }}
          GH_TOKEN: ${{ github.token }}
        run: gh release edit $TAG --prerelease=false --latest --draft=false

      - name: Create changed release info JSON
        if: steps.check_version.outputs.version_released == 'true'
        run: |
          json='{
            "release_tag": "${{ steps.get_latest_draft.outputs.latest_draft_version }}",
            "release_name": "${{ steps.get_latest_draft.outputs.latest_draft_name }}",
            "initial_state": "draft",
            "changed_to_state": "published",
          }'
          echo "$json" > release-info.json

          echo "## release-info.json" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo "$json" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload release info artifact
        if: steps.check_version.outputs.version_released == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: release-info
          path: release-info.json